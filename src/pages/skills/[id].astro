---
import type { GetStaticPaths } from 'astro'
import { calculateRelatedSkills } from '~/logic/relatedSkills'
import SectionHeader from '~/components/common/SectionHeader.astro'
import Wave from '~/components/common/Wave.astro'
import SkillCard from '~/components/projects/skills/SkillCard.astro'
import SkillCardWrapper from '~/components/projects/skills/SkillCardWrapper.astro'
import ProjectList from '~/components/projects/ProjectList.astro'
import Layout from '~/layouts/Layout.astro'
import { getProjects, getSkills, type SkillId } from '~/utils/content'
import PostList from '~/components/blog/PostList.astro'

export const getStaticPaths = (async () =>
  Object.keys(await getSkills()).map(id => ({ params: { id } }))) satisfies GetStaticPaths

const skillEntries = await getSkills()
const projectEntries = await getProjects()

const skill = skillEntries[Astro.params.id as SkillId]
const relatedSkills = calculateRelatedSkills(skillEntries, projectEntries)
---

<Layout name={`${skill.name} - Skills`} description={skill.description}>
  <main class="min-h-screen">
    <header class="centered-header">
      <h1 class="pb-4 text-3xl sm:text-4xl">{skill.name}</h1>
      <p>{skill.description}</p>
    </header>
    <section class="mx-auto max-w-[calc(70ch+2rem)]">
      <PostList heading={3} filter={p => p.data.skills.some(s => s.id === skill.id)} />
    </section>
    <Wave />
    <section class="bg-indigo-100 dark:bg-indigo-925">
      <SectionHeader text="Related skills" />
      <SkillCardWrapper>
        {relatedSkills[skill.id].map(skillId => <SkillCard {skillId} />)}
      </SkillCardWrapper>
    </section>
    <Wave inverted />
    <section>
      <SectionHeader text="Related projects" />
      <ProjectList
        heading={3}
        filter={project =>
          project.parts.some(part => part.skills.some(({ id }) => id === skill.id))}
      />
    </section>
  </main>
</Layout>
